import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class OrderDetail extends Person{
    public String orderID;
    public String customerNameString = "John Doe"; // Placeholder for customer name
    public String orderStatus = "Pending"; // Placeholder for order status
    private List<String> foodOrderList = new ArrayList<>();
    private List<Integer> foodCountList = new ArrayList<>();

    // This runs when an instance of this class is created
    { createOrderID(); }

    public OrderDetail(String customerName){
        this.customerNameString = customerName;
        createOrderID();
    }

    public void setPickedUp(){this.orderStatus = "Out for delivery";}
    private void createOrderID() {
        // Creation of OrderID is generated by the current timestamp formatted as
        // yyyyMMddHHmm
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
        orderID = now.format(formatter);
    }

    public String getOrderID() {
        return orderID;
    }

    private void addItemAndQuantity(String menuItem, int itemCount, Menu menu) {
        if (menu.getItemList().contains(menuItem)) {
            if (itemCount > 0) {
                foodOrderList.add(menuItem);
                foodCountList.add(itemCount);
            } else {
                System.out.println("Invalid quantity for " + menuItem + ". Quantity must be greater than 0.");
                return;
            }
        } else {
            System.out.println("No such item as " + menuItem + ". Please check the menu.");
                return;
        }
        System.out.println("Added " + itemCount + " of " + menuItem + " to your order.");

    }

    private void modifyOrder(String menuItem, int itemCount, Menu menu) {
        if (menu.getItemList().contains(menuItem)) {
            if (itemCount > 0) {
                int index = foodOrderList.indexOf(menuItem);
                if (index != -1) {
                    foodCountList.set(index, itemCount);
                    System.out.println("Updated " + menuItem + " to " + itemCount + " in your order.");
                } else {
                    System.out.println("Item not found in the order. Please add it first.");
                }
            } else {
                System.out.println("Invalid quantity for " + menuItem + ". Quantity must be greater than 0.");
            }
        } else {
            System.out.println("No such item as " + menuItem + ". Please check the menu.");
        }
    }

    private void removeItem(String menuItem) {
        int index = foodOrderList.indexOf(menuItem);
        if (index != -1) {
            foodOrderList.remove(index);
            foodCountList.remove(index);
            System.out.println("Removed " + menuItem + " from your order.");
        } else {
            System.out.println("Item not found in the order. Please check the item name.");
        }
    }

    public double getTotalCost(Menu menu) {
        double totalCost = 0.0;
        if (foodOrderList.isEmpty()) {
            System.out.println("No items in the order. Cannot calculate total cost.");
            return totalCost;
        }
        for (int i = 0; i < foodOrderList.size(); i++) {
            String item = foodOrderList.get(i);
            int count = foodCountList.get(i);
            if (menu.containsItem(item)) {
                totalCost += menu.getItemCost(item) * count;
            } else {
                System.out.println("Item " + item + " not found in the menu. Cannot calculate total cost.");
            }
        }
        return totalCost;
    }

    public void printReceipt(Menu menu) {
        System.out.println("=========================================");
        System.out.println("| Receipt for Order ID: " + orderID);
        System.out.println("| Customer Name: " + customerNameString);
        System.out.println("| Order Status: " + orderStatus);
        System.out.println("-----------------------------------------");
        System.out.println("| Items Ordered:");
        for (int i = 0; i < foodOrderList.size(); i++) {
            String item = foodOrderList.get(i);
            int count = foodCountList.get(i);
            System.out.println("| " + item + " x" + count + " - $" + (menu.getItemCost(item) * count));
        }
        System.out.println("-----------------------------------------");
        System.out.println("| Total Cost: $" + getTotalCost(menu));
        System.out.println("=========================================");
    }

    public static void main(String[] args) {
        Menu inNOut = new Menu();
        OrderDetail order = new OrderDetail("test");
        order.addItemAndQuantity("Hamburger", 2, inNOut);
        order.printReceipt(inNOut);
        order.modifyOrder("Hamburger", 4, inNOut);
    }
}
