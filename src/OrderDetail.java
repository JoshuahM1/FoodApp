import java.util.List;
import java.util.ArrayList;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

public class OrderDetail extends Person{
    public String orderID;
    public String customerNameString = "John Doe"; // Placeholder for customer name
    public String orderStatus = "Pending"; // Placeholder for order status
    private List<String> foodOrderList = new ArrayList<>();
    private List<Integer> foodCountList = new ArrayList<>();
    private Menu menu;


    // This runs when an instance of this class is created
    { createOrderID(); }

    public OrderDetail(String customerName, Menu menu){
        this.customerNameString = customerName;
        this.menu = menu;
        createOrderID();
    }



    public void setPickedUp(){this.orderStatus = "Out for delivery";}
    public void setComfirmed(){this.orderStatus = "The order has been confirmed";}
    public void createOrderID() {
        // Creation of OrderID is generated by the current timestamp formatted as
        // yyyyMMddHHmm
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMMddHHmm");
        orderID = now.format(formatter);
    }

    public String getOrderID() {
        return orderID;
    }

    public void addItemAndQuantity(String menuItem, int itemCount) {
            if(foodOrderList.contains(menuItem)) {
                foodCountList.set(foodCountList.indexOf(menuItem), itemCount);
            }else {
                foodOrderList.add(menuItem);
                foodCountList.add(itemCount);
            }
        }




    public void modifyOrder(String menuItem, int itemCount) {
        if (itemCount > 0) {
            int index = foodOrderList.indexOf(menuItem);
            if (index != -1) {
                foodCountList.set(index, itemCount);
            }
        }
    }

    public void removeItem(String menuItem){
        int index = foodOrderList.indexOf(menuItem);
        if (index != -1) {
            foodOrderList.remove(index);
            foodCountList.remove(index);
            System.out.println("Removed " + menuItem + " from your order.");
        }
    }

    public double getTotalCost(Menu menu) {
        double totalCost = 0.0;
        for (int i = 0; i < foodOrderList.size(); i++) {
            Double itemCost = menu.getItemCost(foodOrderList.get(i));//gets item cost from item name in food order list
            int count = foodCountList.get(i);
            totalCost += itemCost * count;

        }
        return totalCost;
    }

    public Menu getMenu(){return this.menu;}

    public boolean itemInOrder(String menuItem){//checks to see if item is already in the food order
        return foodOrderList.contains(menuItem);
    }

    public boolean isEmpty(){
        return foodOrderList.isEmpty();
    }

    public void printReceipt() {
        System.out.println("=========================================");
        System.out.println("| Receipt for Order ID: " + orderID);
        System.out.println("| Customer Name: " + customerNameString);
        System.out.println("| Order Status: " + orderStatus);
        System.out.println("-----------------------------------------");
        System.out.println("| Items Ordered:");
        for (int i = 0; i < foodOrderList.size(); i++) {
            String item = foodOrderList.get(i);
            int count = foodCountList.get(i);
            System.out.println("| " + item + " x" + count + " - $" + (this.menu.getItemCost(item) * count));
        }
        System.out.println("-----------------------------------------");
        System.out.println("| Total Cost: $" + getTotalCost(menu));
        System.out.println("=========================================");
    }

    public static void main(String[] args) {
        Menu inNOut = new Menu();
        //OrderDetail order = new OrderDetail("test");
        //order.addItemAndQuantity("Hamburger", 2, inNOut);
        //order.printReceipt(inNOut);
        //order.modifyOrder("Hamburger", 4, inNOut);
    }
}
